/[\n\r]+/{row++}
/[ \t]+/{}
/\+|-|\*|\/|%/{add("operator")}
/<=/{add("<=")}
/>=/{add(">=")}
/==/{add("==")}
/!=/{add("!=")}
/&&/{add("&&")}
/\|\|/{add("||")}
/=/{add("=")}
/,/{add(",")}
/;/{add(";")}
/!/{add("!")}
/</{add("<")}
/>/{add(">")}
/\(/{add("(")}
/\)/{add(")")}
/\{/{add("lcb")}
/\}/{add("rcb")}
/void/{add("void")}
/int/{add("int")}
/while/{add("while")}
/if/{add("if")}
/else/{add("else")}
/return/{add("return")}
/break/{add("break")}
/continue/{add("continue")}
/[0-9]+/{add("intcont")}
/[a-zA-Z_][a-zA-Z0-9]*/{add("id")}
/"[^"]*"/{add("string")}
/"[^"\n\r]*/{
  fmt.Printf("Error: Unterminated string constant at line %d: %s\n", row, txt())
  os.Exit(0)
}
/./{
  fmt.Printf("Error: Unrecognized character at line %d: %s.\n", row, txt())
  os.Exit(0)
}
//
package LA
import ("fmt";"os";"container/list")
type Token struct {
	class string
	text string
}
func Parse(srcPath string) (list.List){
  row := 1
  tokenList := list.New()
  src, err := os.Open(srcPath)
  if err != nil {
    fmt.Println(err)
    os.Exit(0)
  }
  defer src.Close()

  lex := NewLexer(src)
  txt := func() string{
    return lex.Text()
  }
  add := func(class string){
    tokenList.PushBack(Token{class, txt()})
  }
  NN_FUN(lex)
  return *tokenList
}